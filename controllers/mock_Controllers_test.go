// Code generated by mockery v2.20.0. DO NOT EDIT.

package controllers

import (
	models "github.com/phuc-create/go-simple-crud/models"
	mock "github.com/stretchr/testify/mock"
)

// MockControllers is an autogenerated mock type for the Controllers type
type MockControllers struct {
	mock.Mock
}

type MockControllers_Expecter struct {
	mock *mock.Mock
}

func (_m *MockControllers) EXPECT() *MockControllers_Expecter {
	return &MockControllers_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function with given fields: user
func (_m *MockControllers) CreateUser(user models.User) (models.User, error) {
	ret := _m.Called(user)

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(models.User) (models.User, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(models.User) models.User); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(models.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockControllers_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockControllers_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - user models.User
func (_e *MockControllers_Expecter) CreateUser(user interface{}) *MockControllers_CreateUser_Call {
	return &MockControllers_CreateUser_Call{Call: _e.mock.On("CreateUser", user)}
}

func (_c *MockControllers_CreateUser_Call) Run(run func(user models.User)) *MockControllers_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.User))
	})
	return _c
}

func (_c *MockControllers_CreateUser_Call) Return(_a0 models.User, _a1 error) *MockControllers_CreateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockControllers_CreateUser_Call) RunAndReturn(run func(models.User) (models.User, error)) *MockControllers_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function with given fields: userID
func (_m *MockControllers) DeleteUser(userID string) (bool, error) {
	ret := _m.Called(userID)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockControllers_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type MockControllers_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - userID string
func (_e *MockControllers_Expecter) DeleteUser(userID interface{}) *MockControllers_DeleteUser_Call {
	return &MockControllers_DeleteUser_Call{Call: _e.mock.On("DeleteUser", userID)}
}

func (_c *MockControllers_DeleteUser_Call) Run(run func(userID string)) *MockControllers_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockControllers_DeleteUser_Call) Return(_a0 bool, _a1 error) *MockControllers_DeleteUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockControllers_DeleteUser_Call) RunAndReturn(run func(string) (bool, error)) *MockControllers_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllUser provides a mock function with given fields:
func (_m *MockControllers) GetAllUser() ([]*models.User, error) {
	ret := _m.Called()

	var r0 []*models.User
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*models.User, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*models.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockControllers_GetAllUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllUser'
type MockControllers_GetAllUser_Call struct {
	*mock.Call
}

// GetAllUser is a helper method to define mock.On call
func (_e *MockControllers_Expecter) GetAllUser() *MockControllers_GetAllUser_Call {
	return &MockControllers_GetAllUser_Call{Call: _e.mock.On("GetAllUser")}
}

func (_c *MockControllers_GetAllUser_Call) Run(run func()) *MockControllers_GetAllUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockControllers_GetAllUser_Call) Return(_a0 []*models.User, _a1 error) *MockControllers_GetAllUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockControllers_GetAllUser_Call) RunAndReturn(run func() ([]*models.User, error)) *MockControllers_GetAllUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByID provides a mock function with given fields: userID
func (_m *MockControllers) GetUserByID(userID string) (models.User, error) {
	ret := _m.Called(userID)

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (models.User, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(string) models.User); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockControllers_GetUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByID'
type MockControllers_GetUserByID_Call struct {
	*mock.Call
}

// GetUserByID is a helper method to define mock.On call
//   - userID string
func (_e *MockControllers_Expecter) GetUserByID(userID interface{}) *MockControllers_GetUserByID_Call {
	return &MockControllers_GetUserByID_Call{Call: _e.mock.On("GetUserByID", userID)}
}

func (_c *MockControllers_GetUserByID_Call) Run(run func(userID string)) *MockControllers_GetUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockControllers_GetUserByID_Call) Return(_a0 models.User, _a1 error) *MockControllers_GetUserByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockControllers_GetUserByID_Call) RunAndReturn(run func(string) (models.User, error)) *MockControllers_GetUserByID_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUserByID provides a mock function with given fields: user
func (_m *MockControllers) UpdateUserByID(user *models.User) (models.User, error) {
	ret := _m.Called(user)

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.User) (models.User, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(*models.User) models.User); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(*models.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockControllers_UpdateUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserByID'
type MockControllers_UpdateUserByID_Call struct {
	*mock.Call
}

// UpdateUserByID is a helper method to define mock.On call
//   - user *models.User
func (_e *MockControllers_Expecter) UpdateUserByID(user interface{}) *MockControllers_UpdateUserByID_Call {
	return &MockControllers_UpdateUserByID_Call{Call: _e.mock.On("UpdateUserByID", user)}
}

func (_c *MockControllers_UpdateUserByID_Call) Run(run func(user *models.User)) *MockControllers_UpdateUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.User))
	})
	return _c
}

func (_c *MockControllers_UpdateUserByID_Call) Return(_a0 models.User, _a1 error) *MockControllers_UpdateUserByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockControllers_UpdateUserByID_Call) RunAndReturn(run func(*models.User) (models.User, error)) *MockControllers_UpdateUserByID_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockControllers interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockControllers creates a new instance of MockControllers. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockControllers(t mockConstructorTestingTNewMockControllers) *MockControllers {
	mock := &MockControllers{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
